{"version":3,"sources":["../node_modules/@ui5/webcomponents-base/dist/renderer/LitRenderer.js","../node_modules/@ui5/webcomponents-base/dist/renderer/scopeHTML.js","../../src/directives/repeat.ts","../../src/directives/class-map.ts","../../src/directives/style-map.ts","../../src/directives/unsafe-html.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../node_modules/@ui5/webcomponents-base/dist/renderer/ifDefined.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/superPropBase.js","../../src/lib/parts.ts","../../src/lib/template.ts","../../src/lib/dom.ts","../../src/lib/default-template-processor.ts","../../src/lib/template-factory.ts","../../src/lib/render.ts","lit-html.ts","../../src/lib/template-result.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/lib/directive.ts","../../src/lib/part.ts","../../src/lib/template-instance.ts"],"names":["tags","suffix","cache","Map","scopeHTML","strings","length","map","string","has","get","result","forEach","tag","replace","RegExp","set","containerPart","beforePart","container","startNode","parentNode","beforeNode","undefined","endNode","insertBefore","newPart","options","insertAfterNode","updatePart","part","value","setValue","commit","ref","nextSibling","generateMap","list","start","end","i","partListCache","WeakMap","keyListCache","repeat","items","keyFnOrTemplate","template","keyFn","Error","newKeyToIndexMap","oldKeyToIndexMap","oldParts","oldKeys","newParts","newValues","newKeys","index","item","oldHead","oldTail","newHead","newTail","oldIndex","oldPart","element","classes","Set","changed","this","classList","getAttribute","split","cls","add","delete","classString","setAttribute","previousClassesCache","classMap","classInfo","committer","name","parts","previousClasses","join","remove","previousStylePropertyCache","styleMap","styleInfo","style","previousStyleProperties","cssText","indexOf","removeProperty","setProperty","previousValues","unsafeHTML","previousValue","fragment","document","createElement","innerHTML","importNode","content","setTags","t","setSuffix","s","scopedHtml","values","html","scopedSvg","svg","litRender","templateResult","domNode","styles","eventContext","render","_taggedTemplateLiteral","raw","slice","Object","freeze","defineProperties","directive","AttributePart","removeAttribute","noChange","target","property","receiver","Reflect","base","object","prototype","hasOwnProperty","call","getPrototypeOf","desc","getOwnPropertyDescriptor","isPrimitive","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","l","v","String","text","_getValue","NodePart","__pendingValue","appendChild","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","node","valueAsString","previousSibling","nodeType","data","createTextNode","templateFactory","update","instance","processor","_clone","itemPart","itemParts","partIndex","push","appendIntoPart","insertAfterPart","BooleanAttributePart","PropertyCommitter","single","PropertyPart","eventOptionsSupported","window","addEventListener","removeEventListener","_e","EventPart","eventName","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","__options","getOptions","event","o","marker","Math","random","nodeMarker","markerRegex","boundAttributeSuffix","Template","nodesToRemove","stack","walker","createTreeWalker","lastPartIndex","nextNode","hasAttributes","attributes","count","endsWith","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","statics","type","tagName","currentNode","parent","lastIndex","insert","createMarker","match","pop","n","removeChild","str","isTemplatePartActive","createComment","isCEPolyfill","customElements","polyfillWrapFlushCallback","reparentNodes","before","removeNodes","defaultTemplateProcessor","prefix","templateCache","templateCaches","stringsArray","keyString","key","getTemplateElement","firstChild","appendInto","policy","trustedTypes","createPolicy","createHTML","commentMarker","TemplateResult","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","getHTML","SVGTemplateResult","svgElement","_createForOfIteratorHelper","allowArrayLike","it","F","done","f","TypeError","err","normalCompletion","didErr","step","next","_e2","directives","d","isDirective","nothing","TemplateInstance","__parts","cloneNode","nodeIndex","nodeName","handleTextExpression","handleAttributeExpressions","adoptNode","upgrade"],"mappings":"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","file":"static/js/1.0e512ae4.chunk.js","sourcesContent":["import { html, svg, render } from \"lit-html/lit-html.js\";\nimport scopeHTML from \"./scopeHTML.js\";\n\nlet tags;\nlet\tsuffix;\n\nconst setTags = t => {\n\ttags = t;\n};\nconst setSuffix = s => {\n\tsuffix = s;\n};\n\nconst litRender = (templateResult, domNode, styles, { eventContext } = {}) => {\n\tif (styles) {\n\t\ttemplateResult = html`<style>${styles}</style>${templateResult}`;\n\t}\n\trender(templateResult, domNode, { eventContext });\n};\n\nconst scopedHtml = (strings, ...values) => html(scopeHTML(strings, tags, suffix), ...values);\nconst scopedSvg = (strings, ...values) => svg(scopeHTML(strings, tags, suffix), ...values);\n\nexport { setTags, setSuffix };\nexport { scopedHtml as html, scopedSvg as svg };\nexport { repeat } from \"lit-html/directives/repeat.js\";\nexport { classMap } from \"lit-html/directives/class-map.js\";\nexport { styleMap } from \"lit-html/directives/style-map.js\";\nexport { unsafeHTML } from \"lit-html/directives/unsafe-html.js\";\n\nexport default litRender;\n","const cache = new Map();\n\nconst scopeHTML = (strings, tags, suffix) => {\n\tif (suffix && tags && tags.length) {\n\t\tstrings = strings.map(string => {\n\t\t\tif (cache.has(string)) {\n\t\t\t\treturn cache.get(string);\n\t\t\t}\n\n\t\t\t/*\n\t\t\tconst allTags = [...string.matchAll(/<(ui5-.*?)[> ]/g)].map(x => x[1]);\n\t\t\tallTags.forEach(t => {\n\t\t\t\tif (!tags.includes(t)) {\n\t\t\t\t\tthrow new Error(`${t} not found in ${string}`);\n\t\t\t\t\t// console.log(t, \" in \", string);\n\t\t\t\t}\n\t\t\t});\n\t\t\t*/\n\n\t\t\tlet result = string;\n\t\t\ttags.forEach(tag => {\n\t\t\t\tresult = result.replace(new RegExp(`(</?)(${tag})(/?[> \\t\\n])`, \"g\"), `$1$2-${suffix}$3`);\n\t\t\t});\n\t\t\tcache.set(string, result);\n\t\t\treturn result;\n\t\t});\n\t}\n\n\treturn strings;\n};\n\nexport default scopeHTML;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {DirectiveFn} from '../lib/directive.js';\nimport {createMarker, directive, NodePart, Part, removeNodes, reparentNodes} from '../lit-html.js';\n\nexport type KeyFn<T> = (item: T, index: number) => unknown;\nexport type ItemTemplate<T> = (item: T, index: number) => unknown;\n\n// Helper functions for manipulating parts\n// TODO(kschaaf): Refactor into Part API?\nconst createAndInsertPart =\n    (containerPart: NodePart, beforePart?: NodePart): NodePart => {\n      const container = containerPart.startNode.parentNode as Node;\n      const beforeNode = beforePart === undefined ? containerPart.endNode :\n                                                    beforePart.startNode;\n      const startNode = container.insertBefore(createMarker(), beforeNode);\n      container.insertBefore(createMarker(), beforeNode);\n      const newPart = new NodePart(containerPart.options);\n      newPart.insertAfterNode(startNode);\n      return newPart;\n    };\n\nconst updatePart = (part: NodePart, value: unknown) => {\n  part.setValue(value);\n  part.commit();\n  return part;\n};\n\nconst insertPartBefore =\n    (containerPart: NodePart, part: NodePart, ref?: NodePart) => {\n      const container = containerPart.startNode.parentNode as Node;\n      const beforeNode = ref ? ref.startNode : containerPart.endNode;\n      const endNode = part.endNode.nextSibling;\n      if (endNode !== beforeNode) {\n        reparentNodes(container, part.startNode, endNode, beforeNode);\n      }\n    };\n\nconst removePart = (part: NodePart) => {\n  removeNodes(\n      part.startNode.parentNode!, part.startNode, part.endNode.nextSibling);\n};\n\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list: unknown[], start: number, end: number) => {\n  const map = new Map();\n  for (let i = start; i <= end; i++) {\n    map.set(list[i], i);\n  }\n  return map;\n};\n\n// Stores previous ordered list of parts and map of key to index\nconst partListCache = new WeakMap<NodePart, (NodePart | null)[]>();\nconst keyListCache = new WeakMap<NodePart, unknown[]>();\n\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * and removals.\n *\n * IMPORTANT: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat =\n    directive(\n        <T>(items: Iterable<T>,\n            keyFnOrTemplate: KeyFn<T>|ItemTemplate<T>,\n            template?: ItemTemplate<T>):\n            DirectiveFn => {\n              let keyFn: KeyFn<T>;\n              if (template === undefined) {\n                template = keyFnOrTemplate;\n              } else if (keyFnOrTemplate !== undefined) {\n                keyFn = keyFnOrTemplate as KeyFn<T>;\n              }\n\n              return (containerPart: Part): void => {\n                if (!(containerPart instanceof NodePart)) {\n                  throw new Error('repeat can only be used in text bindings');\n                }\n                // Old part & key lists are retrieved from the last update\n                // (associated with the part for this instance of the directive)\n                const oldParts = partListCache.get(containerPart) || [];\n                const oldKeys = keyListCache.get(containerPart) || [];\n\n                // New part list will be built up as we go (either reused from\n                // old parts or created for new keys in this update). This is\n                // saved in the above cache at the end of the update.\n                const newParts: NodePart[] = [];\n\n                // New value list is eagerly generated from items along with a\n                // parallel array indicating its key.\n                const newValues: unknown[] = [];\n                const newKeys: unknown[] = [];\n                let index = 0;\n                for (const item of items) {\n                  newKeys[index] = keyFn ? keyFn(item, index) : index;\n                  newValues[index] = template !(item, index);\n                  index++;\n                }\n\n                // Maps from key to index for current and previous update; these\n                // are generated lazily only when needed as a performance\n                // optimization, since they are only required for multiple\n                // non-contiguous changes in the list, which are less common.\n                let newKeyToIndexMap!: Map<unknown, number>;\n                let oldKeyToIndexMap!: Map<unknown, number>;\n\n                // Head and tail pointers to old parts and new values\n                let oldHead = 0;\n                let oldTail = oldParts.length - 1;\n                let newHead = 0;\n                let newTail = newValues.length - 1;\n\n                // Overview of O(n) reconciliation algorithm (general approach\n                // based on ideas found in ivi, vue, snabbdom, etc.):\n                //\n                // * We start with the list of old parts and new values (and\n                //   arrays of their respective keys), head/tail pointers into\n                //   each, and we build up the new list of parts by updating\n                //   (and when needed, moving) old parts or creating new ones.\n                //   The initial scenario might look like this (for brevity of\n                //   the diagrams, the numbers in the array reflect keys\n                //   associated with the old parts or new values, although keys\n                //   and parts/values are actually stored in parallel arrays\n                //   indexed using the same head/tail pointers):\n                //\n                //      oldHead v                 v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n                //                                      item order\n                //      newHead ^                 ^ newTail\n                //\n                // * Iterate old & new lists from both sides, updating,\n                //   swapping, or removing parts at the head/tail locations\n                //   until neither head nor tail can move.\n                //\n                // * Example below: keys at head pointers match, so update old\n                //   part 0 in-place (no need to move it) and record part 0 in\n                //   the `newParts` list. The last thing we do is advance the\n                //   `oldHead` and `newHead` pointers (will be reflected in the\n                //   next diagram).\n                //\n                //      oldHead v                 v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n                //                                      & newHead\n                //      newHead ^                 ^ newTail\n                //\n                // * Example below: head pointers don't match, but tail\n                //   pointers do, so update part 6 in place (no need to move\n                //   it), and record part 6 in the `newParts` list. Last,\n                //   advance the `oldTail` and `oldHead` pointers.\n                //\n                //         oldHead v              v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n                //                                      & newTail\n                //         newHead ^              ^ newTail\n                //\n                // * If neither head nor tail match; next check if one of the\n                //   old head/tail items was removed. We first need to generate\n                //   the reverse map of new keys to index (`newKeyToIndexMap`),\n                //   which is done once lazily as a performance optimization,\n                //   since we only hit this case if multiple non-contiguous\n                //   changes were made. Note that for contiguous removal\n                //   anywhere in the list, the head and tails would advance\n                //   from either end and pass each other before we get to this\n                //   case and removals would be handled in the final while loop\n                //   without needing to generate the map.\n                //\n                // * Example below: The key at `oldTail` was removed (no longer\n                //   in the `newKeyToIndexMap`), so remove that part from the\n                //   DOM and advance just the `oldTail` pointer.\n                //\n                //         oldHead v           v oldTail\n                //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n                //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n                //         newHead ^           ^ newTail\n                //\n                // * Once head and tail cannot move, any mismatches are due to\n                //   either new or moved items; if a new key is in the previous\n                //   \"old key to old index\" map, move the old part to the new\n                //   location, otherwise create and insert a new part. Note\n                //   that when moving an old part we null its position in the\n                //   oldParts array if it lies between the head and tail so we\n                //   know to skip it when the pointers get there.\n                //\n                // * Example below: neither head nor tail match, and neither\n                //   were removed; so find the `newHead` key in the\n                //   `oldKeyToIndexMap`, and move that old part's DOM into the\n                //   next head position (before `oldParts[oldHead]`). Last,\n                //   null the part in the `oldPart` array since it was\n                //   somewhere in the remaining oldParts still to be scanned\n                //   (between the head and tail pointers) so that we know to\n                //   skip that old part on future iterations.\n                //\n                //         oldHead v        v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n                //                                      newHead\n                //         newHead ^           ^ newTail\n                //\n                // * Note that for moves/insertions like the one above, a part\n                //   inserted at the head pointer is inserted before the\n                //   current `oldParts[oldHead]`, and a part inserted at the\n                //   tail pointer is inserted before `newParts[newTail+1]`. The\n                //   seeming asymmetry lies in the fact that new parts are\n                //   moved into place outside in, so to the right of the head\n                //   pointer are old parts, and to the right of the tail\n                //   pointer are new parts.\n                //\n                // * We always restart back from the top of the algorithm,\n                //   allowing matching and simple updates in place to\n                //   continue...\n                //\n                // * Example below: the head pointers once again match, so\n                //   simply update part 1 and record it in the `newParts`\n                //   array.  Last, advance both head pointers.\n                //\n                //         oldHead v        v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n                //                                      & newHead\n                //            newHead ^        ^ newTail\n                //\n                // * As mentioned above, items that were moved as a result of\n                //   being stuck (the final else clause in the code below) are\n                //   marked with null, so we always advance old pointers over\n                //   these so we're comparing the next actual old value on\n                //   either end.\n                //\n                // * Example below: `oldHead` is null (already placed in\n                //   newParts), so advance `oldHead`.\n                //\n                //            oldHead v     v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n                //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n                //               newHead ^     ^ newTail\n                //\n                // * Note it's not critical to mark old parts as null when they\n                //   are moved from head to tail or tail to head, since they\n                //   will be outside the pointer range and never visited again.\n                //\n                // * Example below: Here the old tail key matches the new head\n                //   key, so the part at the `oldTail` position and move its\n                //   DOM to the new head position (before `oldParts[oldHead]`).\n                //   Last, advance `oldTail` and `newHead` pointers.\n                //\n                //               oldHead v  v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n                //                                     advance oldTail & newHead\n                //               newHead ^     ^ newTail\n                //\n                // * Example below: Old and new head keys match, so update the\n                //   old head part in place, and advance the `oldHead` and\n                //   `newHead` pointers.\n                //\n                //               oldHead v oldTail\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n                //                                      newHead\n                //                  newHead ^  ^ newTail\n                //\n                // * Once the new or old pointers move past each other then all\n                //   we have left is additions (if old list exhausted) or\n                //   removals (if new list exhausted). Those are handled in the\n                //   final while loops at the end.\n                //\n                // * Example below: `oldHead` exceeded `oldTail`, so we're done\n                //   with the main loop.  Create the remaining part and insert\n                //   it at the new head position, and the update is complete.\n                //\n                //                   (oldHead > oldTail)\n                //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n                //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n                //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n                //                     newHead ^ newTail\n                //\n                // * Note that the order of the if/else clauses is not\n                //   important to the algorithm, as long as the null checks\n                //   come first (to ensure we're always working on valid old\n                //   parts) and that the final else clause comes last (since\n                //   that's where the expensive moves occur). The order of\n                //   remaining clauses is is just a simple guess at which cases\n                //   will be most common.\n                //\n                // * TODO(kschaaf) Note, we could calculate the longest\n                //   increasing subsequence (LIS) of old items in new position,\n                //   and only move those not in the LIS set. However that costs\n                //   O(nlogn) time and adds a bit more code, and only helps\n                //   make rare types of mutations require fewer moves. The\n                //   above handles removes, adds, reversal, swaps, and single\n                //   moves of contiguous items in linear time, in the minimum\n                //   number of moves. As the number of multiple moves where LIS\n                //   might help approaches a random shuffle, the LIS\n                //   optimization becomes less helpful, so it seems not worth\n                //   the code at this point. Could reconsider if a compelling\n                //   case arises.\n\n                while (oldHead <= oldTail && newHead <= newTail) {\n                  if (oldParts[oldHead] === null) {\n                    // `null` means old part at head has already been used\n                    // below; skip\n                    oldHead++;\n                  } else if (oldParts[oldTail] === null) {\n                    // `null` means old part at tail has already been used\n                    // below; skip\n                    oldTail--;\n                  } else if (oldKeys[oldHead] === newKeys[newHead]) {\n                    // Old head matches new head; update in place\n                    newParts[newHead] =\n                        updatePart(oldParts[oldHead]!, newValues[newHead]);\n                    oldHead++;\n                    newHead++;\n                  } else if (oldKeys[oldTail] === newKeys[newTail]) {\n                    // Old tail matches new tail; update in place\n                    newParts[newTail] =\n                        updatePart(oldParts[oldTail]!, newValues[newTail]);\n                    oldTail--;\n                    newTail--;\n                  } else if (oldKeys[oldHead] === newKeys[newTail]) {\n                    // Old head matches new tail; update and move to new tail\n                    newParts[newTail] =\n                        updatePart(oldParts[oldHead]!, newValues[newTail]);\n                    insertPartBefore(\n                        containerPart,\n                        oldParts[oldHead]!,\n                        newParts[newTail + 1]);\n                    oldHead++;\n                    newTail--;\n                  } else if (oldKeys[oldTail] === newKeys[newHead]) {\n                    // Old tail matches new head; update and move to new head\n                    newParts[newHead] =\n                        updatePart(oldParts[oldTail]!, newValues[newHead]);\n                    insertPartBefore(\n                        containerPart, oldParts[oldTail]!, oldParts[oldHead]!);\n                    oldTail--;\n                    newHead++;\n                  } else {\n                    if (newKeyToIndexMap === undefined) {\n                      // Lazily generate key-to-index maps, used for removals &\n                      // moves below\n                      newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n                      oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n                    }\n                    if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n                      // Old head is no longer in new list; remove\n                      removePart(oldParts[oldHead]!);\n                      oldHead++;\n                    } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n                      // Old tail is no longer in new list; remove\n                      removePart(oldParts[oldTail]!);\n                      oldTail--;\n                    } else {\n                      // Any mismatches at this point are due to additions or\n                      // moves; see if we have an old part we can reuse and move\n                      // into place\n                      const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n                      const oldPart =\n                          oldIndex !== undefined ? oldParts[oldIndex] : null;\n                      if (oldPart === null) {\n                        // No old part for this value; create a new one and\n                        // insert it\n                        const newPart = createAndInsertPart(\n                            containerPart, oldParts[oldHead]!);\n                        updatePart(newPart, newValues[newHead]);\n                        newParts[newHead] = newPart;\n                      } else {\n                        // Reuse old part\n                        newParts[newHead] =\n                            updatePart(oldPart, newValues[newHead]);\n                        insertPartBefore(\n                            containerPart, oldPart, oldParts[oldHead]!);\n                        // This marks the old part as having been used, so that\n                        // it will be skipped in the first two checks above\n                        oldParts[oldIndex as number] = null;\n                      }\n                      newHead++;\n                    }\n                  }\n                }\n                // Add parts for any remaining new values\n                while (newHead <= newTail) {\n                  // For all remaining additions, we insert before last new\n                  // tail, since old pointers are no longer valid\n                  const newPart =\n                      createAndInsertPart(containerPart, newParts[newTail + 1]);\n                  updatePart(newPart, newValues[newHead]);\n                  newParts[newHead++] = newPart;\n                }\n                // Remove any remaining unused old parts\n                while (oldHead <= oldTail) {\n                  const oldPart = oldParts[oldHead++];\n                  if (oldPart !== null) {\n                    removePart(oldPart);\n                  }\n                }\n                // Save order of new parts for next round\n                partListCache.set(containerPart, newParts);\n                keyListCache.set(containerPart, newKeys);\n              };\n            }) as\n    <T>(items: Iterable<T>,\n        keyFnOrTemplate: KeyFn<T>|ItemTemplate<T>,\n        template?: ItemTemplate<T>) => DirectiveFn;\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part, PropertyPart} from '../lit-html.js';\n\n// IE11 doesn't support classList on SVG elements, so we emulate it with a Set\nclass ClassList {\n  element: Element;\n  classes: Set<string> = new Set();\n  changed = false;\n\n  constructor(element: Element) {\n    this.element = element;\n    const classList = (element.getAttribute('class') || '').split(/\\s+/);\n    for (const cls of classList) {\n      this.classes.add(cls);\n    }\n  }\n  add(cls: string) {\n    this.classes.add(cls);\n    this.changed = true;\n  }\n\n  remove(cls: string) {\n    this.classes.delete(cls);\n    this.changed = true;\n  }\n\n  commit() {\n    if (this.changed) {\n      let classString = '';\n      this.classes.forEach((cls) => classString += cls + ' ');\n      this.element.setAttribute('class', classString);\n    }\n  }\n}\n\nexport interface ClassInfo {\n  readonly [name: string]: string|boolean|number;\n}\n\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst previousClassesCache = new WeakMap<Part, Set<string>>();\n\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `class` if the property value is truthy; if the property value is\n * falsey, the property name is removed from the element's `class`. For example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo: ClassInfo) => (part: Part) => {\n  if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n      part.committer.name !== 'class' || part.committer.parts.length > 1) {\n    throw new Error(\n        'The `classMap` directive must be used in the `class` attribute ' +\n        'and must be the only part in the attribute.');\n  }\n\n  const {committer} = part;\n  const {element} = committer;\n\n  let previousClasses = previousClassesCache.get(part);\n  if (previousClasses === undefined) {\n    // Write static classes once\n    // Use setAttribute() because className isn't a string on SVG elements\n    element.setAttribute('class', committer.strings.join(' '));\n    previousClassesCache.set(part, previousClasses = new Set());\n  }\n\n  const classList =\n      (element.classList || new ClassList(element)) as DOMTokenList | ClassList;\n\n  // Remove old classes that no longer apply\n  // We use forEach() instead of for-of so that re don't require down-level\n  // iteration.\n  previousClasses.forEach((name) => {\n    if (!(name in classInfo)) {\n      classList.remove(name);\n      previousClasses!.delete(name);\n    }\n  });\n\n  // Add or remove classes based on their classMap value\n  for (const name in classInfo) {\n    const value = classInfo[name];\n    if (value != previousClasses.has(name)) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      if (value) {\n        classList.add(name);\n        previousClasses.add(name);\n      } else {\n        classList.remove(name);\n        previousClasses.delete(name);\n      }\n    }\n  }\n  if (typeof (classList as ClassList).commit === 'function') {\n    (classList as ClassList).commit();\n  }\n});\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part, PropertyPart} from '../lit-html.js';\n\nexport interface StyleInfo {\n  readonly [name: string]: string;\n}\n\n/**\n * Stores the StyleInfo object applied to a given AttributePart.\n * Used to unset existing values when a new StyleInfo object is applied.\n */\nconst previousStylePropertyCache = new WeakMap<AttributePart, Set<string>>();\n\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the `styleInfo`\n * object and adds the property values as CSS properties. Property names with\n * dashes (`-`) are assumed to be valid CSS property names and set on the\n * element's style object using `setProperty()`. Names without dashes are\n * assumed to be camelCased JavaScript property names and set on the element's\n * style object using property assignment, allowing the style object to\n * translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo {StyleInfo}\n */\nexport const styleMap = directive((styleInfo: StyleInfo) => (part: Part) => {\n  if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n      part.committer.name !== 'style' || part.committer.parts.length > 1) {\n    throw new Error(\n        'The `styleMap` directive must be used in the style attribute ' +\n        'and must be the only part in the attribute.');\n  }\n\n  const {committer} = part;\n  const {style} = committer.element as HTMLElement;\n\n  let previousStyleProperties = previousStylePropertyCache.get(part);\n\n  if (previousStyleProperties === undefined) {\n    // Write static styles once\n    style.cssText = committer.strings.join(' ');\n    previousStylePropertyCache.set(part, previousStyleProperties = new Set());\n  }\n\n  // Remove old properties that no longer exist in styleInfo\n  // We use forEach() instead of for-of so that re don't require down-level\n  // iteration.\n  previousStyleProperties.forEach((name) => {\n    if (!(name in styleInfo)) {\n      previousStyleProperties!.delete(name);\n      if (name.indexOf('-') === -1) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (style as any)[name] = null;\n      } else {\n        style.removeProperty(name);\n      }\n    }\n  });\n\n  // Add or update properties\n  for (const name in styleInfo) {\n    previousStyleProperties.add(name);\n    if (name.indexOf('-') === -1) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (style as any)[name] = styleInfo[name];\n    } else {\n      style.setProperty(name, styleInfo[name]);\n    }\n  }\n});\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isPrimitive} from '../lib/parts.js';\nimport {directive, NodePart, Part} from '../lit-html.js';\n\ninterface PreviousValue {\n  readonly value: unknown;\n  readonly fragment: DocumentFragment;\n}\n\n// For each part, remember the value that was last rendered to the part by the\n// unsafeHTML directive, and the DocumentFragment that was last set as a value.\n// The DocumentFragment is used as a unique key to check if the last value\n// rendered to the part was with unsafeHTML. If not, we'll always re-render the\n// value passed to unsafeHTML.\nconst previousValues = new WeakMap<NodePart, PreviousValue>();\n\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive((value: unknown) => (part: Part): void => {\n  if (!(part instanceof NodePart)) {\n    throw new Error('unsafeHTML can only be used in text bindings');\n  }\n\n  const previousValue = previousValues.get(part);\n\n  if (previousValue !== undefined && isPrimitive(value) &&\n      value === previousValue.value && part.value === previousValue.fragment) {\n    return;\n  }\n\n  const template = document.createElement('template');\n  template.innerHTML = value as string;  // innerHTML casts to string internally\n  const fragment = document.importNode(template.content, true);\n  part.setValue(fragment);\n  previousValues.set(part, {value, fragment});\n});\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import {\n\tAttributePart,\n\tdirective,\n\tnoChange,\n} from \"lit-html/lit-html.js\";\n\n/*\n\tlit-html directive that removes and attribute if it is undefined\n*/\nexport default directive(value => part => {\n\tif ((value === undefined) && part instanceof AttributePart) {\n\t\tif (value !== part.value) {\n\t\t\tconst name = part.committer.name;\n\t\t\tpart.committer.element.removeAttribute(name);\n\t\t}\n\t} else if (part.committer && part.committer.element && part.committer.element.getAttribute(part.committer.name) === value) {\n\t\tpart.setValue(noChange);\n\t} else {\n\t\tpart.setValue(value);\n\t}\n});\n","import superPropBase from \"@babel/runtime/helpers/esm/superPropBase\";\nexport default function _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isDirective} from './directive.js';\nimport {removeNodes} from './dom.js';\nimport {noChange, nothing, Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateInstance} from './template-instance.js';\nimport {TemplateResult} from './template-result.js';\nimport {createMarker} from './template.js';\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\nexport type Primitive = null|undefined|boolean|number|string|symbol|bigint;\nexport const isPrimitive = (value: unknown): value is Primitive => {\n  return (\n      value === null ||\n      !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value: unknown): value is Iterable<unknown> => {\n  return Array.isArray(value) ||\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      !!(value && (value as any)[Symbol.iterator]);\n};\n\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n  readonly parts: ReadonlyArray<AttributePart>;\n  dirty = true;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n    this.parts = [];\n    for (let i = 0; i < strings.length - 1; i++) {\n      (this.parts as AttributePart[])[i] = this._createPart();\n    }\n  }\n\n  /**\n   * Creates a single part. Override this to create a differnt type of part.\n   */\n  protected _createPart(): AttributePart {\n    return new AttributePart(this);\n  }\n\n  protected _getValue(): unknown {\n    const strings = this.strings;\n    const l = strings.length - 1;\n    const parts = this.parts;\n\n    // If we're assigning an attribute via syntax like:\n    //    attr=\"${foo}\"  or  attr=${foo}\n    // but not\n    //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n    // then we don't want to coerce the attribute value into one long\n    // string. Instead we want to just return the value itself directly,\n    // so that sanitizeDOMValue can get the actual value rather than\n    // String(value)\n    // The exception is if v is an array, in which case we do want to smash\n    // it together into a string without calling String() on the array.\n    //\n    // This also allows trusted values (when using TrustedTypes) being\n    // assigned to DOM sinks without being stringified in the process.\n    if (l === 1 && strings[0] === '' && strings[1] === '') {\n      const v = parts[0].value;\n      if (typeof v === 'symbol') {\n        return String(v);\n      }\n      if (typeof v === 'string' || !isIterable(v)) {\n        return v;\n      }\n    }\n    let text = '';\n\n    for (let i = 0; i < l; i++) {\n      text += strings[i];\n      const part = parts[i];\n      if (part !== undefined) {\n        const v = part.value;\n        if (isPrimitive(v) || !isIterable(v)) {\n          text += typeof v === 'string' ? v : String(v);\n        } else {\n          for (const t of v) {\n            text += typeof t === 'string' ? t : String(t);\n          }\n        }\n      }\n    }\n\n    text += strings[l];\n    return text;\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      this.element.setAttribute(this.name, this._getValue() as string);\n    }\n  }\n}\n\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart implements Part {\n  readonly committer: AttributeCommitter;\n  value: unknown = undefined;\n\n  constructor(committer: AttributeCommitter) {\n    this.committer = committer;\n  }\n\n  setValue(value: unknown): void {\n    if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n      this.value = value;\n      // If the value is a not a directive, dirty the committer so that it'll\n      // call setAttribute. If the value is a directive, it'll dirty the\n      // committer if it calls setValue().\n      if (!isDirective(value)) {\n        this.committer.dirty = true;\n      }\n    }\n  }\n\n  commit() {\n    while (isDirective(this.value)) {\n      const directive = this.value;\n      this.value = noChange;\n      directive(this);\n    }\n    if (this.value === noChange) {\n      return;\n    }\n    this.committer.commit();\n  }\n}\n\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart implements Part {\n  readonly options: RenderOptions;\n  startNode!: Node;\n  endNode!: Node;\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(options: RenderOptions) {\n    this.options = options;\n  }\n\n  /**\n   * Appends this part into a container.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendInto(container: Node) {\n    this.startNode = container.appendChild(createMarker());\n    this.endNode = container.appendChild(createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n   * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n   * such as those that appear in a literal section of a template.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterNode(ref: Node) {\n    this.startNode = ref;\n    this.endNode = ref.nextSibling!;\n  }\n\n  /**\n   * Appends this part into a parent part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  appendIntoPart(part: NodePart) {\n    part.__insert(this.startNode = createMarker());\n    part.__insert(this.endNode = createMarker());\n  }\n\n  /**\n   * Inserts this part after the `ref` part.\n   *\n   * This part must be empty, as its contents are not automatically moved.\n   */\n  insertAfterPart(ref: NodePart) {\n    ref.__insert(this.startNode = createMarker());\n    this.endNode = ref.endNode;\n    ref.endNode = this.startNode;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    if (this.startNode.parentNode === null) {\n      return;\n    }\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    const value = this.__pendingValue;\n    if (value === noChange) {\n      return;\n    }\n    if (isPrimitive(value)) {\n      if (value !== this.value) {\n        this.__commitText(value);\n      }\n    } else if (value instanceof TemplateResult) {\n      this.__commitTemplateResult(value);\n    } else if (value instanceof Node) {\n      this.__commitNode(value);\n    } else if (isIterable(value)) {\n      this.__commitIterable(value);\n    } else if (value === nothing) {\n      this.value = nothing;\n      this.clear();\n    } else {\n      // Fallback, will render the string representation\n      this.__commitText(value);\n    }\n  }\n\n  private __insert(node: Node) {\n    this.endNode.parentNode!.insertBefore(node, this.endNode);\n  }\n\n  private __commitNode(value: Node): void {\n    if (this.value === value) {\n      return;\n    }\n    this.clear();\n    this.__insert(value);\n    this.value = value;\n  }\n\n  private __commitText(value: unknown): void {\n    const node = this.startNode.nextSibling!;\n    value = value == null ? '' : value;\n    // If `value` isn't already a string, we explicitly convert it here in case\n    // it can't be implicitly converted - i.e. it's a symbol.\n    const valueAsString: string =\n        typeof value === 'string' ? value : String(value);\n    if (node === this.endNode.previousSibling &&\n        node.nodeType === 3 /* Node.TEXT_NODE */) {\n      // If we only have a single text node between the markers, we can just\n      // set its value, rather than replacing it.\n      // TODO(justinfagnani): Can we just check if this.value is primitive?\n      (node as Text).data = valueAsString;\n    } else {\n      this.__commitNode(document.createTextNode(valueAsString));\n    }\n    this.value = value;\n  }\n\n  private __commitTemplateResult(value: TemplateResult): void {\n    const template = this.options.templateFactory(value);\n    if (this.value instanceof TemplateInstance &&\n        this.value.template === template) {\n      this.value.update(value.values);\n    } else {\n      // Make sure we propagate the template processor from the TemplateResult\n      // so that we use its syntax extension, etc. The template factory comes\n      // from the render function options so that it can control template\n      // caching and preprocessing.\n      const instance =\n          new TemplateInstance(template, value.processor, this.options);\n      const fragment = instance._clone();\n      instance.update(value.values);\n      this.__commitNode(fragment);\n      this.value = instance;\n    }\n  }\n\n  private __commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If _value is an array, then the previous render was of an\n    // iterable and _value will contain the NodeParts from the previous\n    // render. If _value is not an array, clear this part and make a new\n    // array for NodeParts.\n    if (!Array.isArray(this.value)) {\n      this.value = [];\n      this.clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this.value as NodePart[];\n    let partIndex = 0;\n    let itemPart: NodePart|undefined;\n\n    for (const item of value) {\n      // Try to reuse an existing part\n      itemPart = itemParts[partIndex];\n\n      // If no existing part, create a new one\n      if (itemPart === undefined) {\n        itemPart = new NodePart(this.options);\n        itemParts.push(itemPart);\n        if (partIndex === 0) {\n          itemPart.appendIntoPart(this);\n        } else {\n          itemPart.insertAfterPart(itemParts[partIndex - 1]);\n        }\n      }\n      itemPart.setValue(item);\n      itemPart.commit();\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n      this.clear(itemPart && itemPart.endNode);\n    }\n  }\n\n  clear(startNode: Node = this.startNode) {\n    removeNodes(\n        this.startNode.parentNode!, startNode.nextSibling!, this.endNode);\n  }\n}\n\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart implements Part {\n  readonly element: Element;\n  readonly name: string;\n  readonly strings: readonly string[];\n  value: unknown = undefined;\n  private __pendingValue: unknown = undefined;\n\n  constructor(element: Element, name: string, strings: readonly string[]) {\n    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n      throw new Error(\n          'Boolean attributes can only contain a single expression');\n    }\n    this.element = element;\n    this.name = name;\n    this.strings = strings;\n  }\n\n  setValue(value: unknown): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n    const value = !!this.__pendingValue;\n    if (this.value !== value) {\n      if (value) {\n        this.element.setAttribute(this.name, '');\n      } else {\n        this.element.removeAttribute(this.name);\n      }\n      this.value = value;\n    }\n    this.__pendingValue = noChange;\n  }\n}\n\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n  readonly single: boolean;\n\n  constructor(element: Element, name: string, strings: ReadonlyArray<string>) {\n    super(element, name, strings);\n    this.single =\n        (strings.length === 2 && strings[0] === '' && strings[1] === '');\n  }\n\n  protected _createPart(): PropertyPart {\n    return new PropertyPart(this);\n  }\n\n  protected _getValue() {\n    if (this.single) {\n      return this.parts[0].value;\n    }\n    return super._getValue();\n  }\n\n  commit(): void {\n    if (this.dirty) {\n      this.dirty = false;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this.element as any)[this.name] = this._getValue();\n    }\n  }\n}\n\nexport class PropertyPart extends AttributePart {}\n\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n  try {\n    const options = {\n      get capture() {\n        eventOptionsSupported = true;\n        return false;\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.addEventListener('test', options as any, options);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    window.removeEventListener('test', options as any, options);\n  } catch (_e) {\n    // event options not supported\n  }\n})();\n\ntype EventHandlerWithOptions =\n    EventListenerOrEventListenerObject&Partial<AddEventListenerOptions>;\nexport class EventPart implements Part {\n  readonly element: Element;\n  readonly eventName: string;\n  readonly eventContext?: EventTarget;\n  value: undefined|EventHandlerWithOptions = undefined;\n  private __options?: AddEventListenerOptions;\n  private __pendingValue: undefined|EventHandlerWithOptions = undefined;\n  private readonly __boundHandleEvent: (event: Event) => void;\n\n  constructor(element: Element, eventName: string, eventContext?: EventTarget) {\n    this.element = element;\n    this.eventName = eventName;\n    this.eventContext = eventContext;\n    this.__boundHandleEvent = (e) => this.handleEvent(e);\n  }\n\n  setValue(value: undefined|EventHandlerWithOptions): void {\n    this.__pendingValue = value;\n  }\n\n  commit() {\n    while (isDirective(this.__pendingValue)) {\n      const directive = this.__pendingValue;\n      this.__pendingValue = noChange as EventHandlerWithOptions;\n      directive(this);\n    }\n    if (this.__pendingValue === noChange) {\n      return;\n    }\n\n    const newListener = this.__pendingValue;\n    const oldListener = this.value;\n    const shouldRemoveListener = newListener == null ||\n        oldListener != null &&\n            (newListener.capture !== oldListener.capture ||\n             newListener.once !== oldListener.once ||\n             newListener.passive !== oldListener.passive);\n    const shouldAddListener =\n        newListener != null && (oldListener == null || shouldRemoveListener);\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    if (shouldAddListener) {\n      this.__options = getOptions(newListener);\n      this.element.addEventListener(\n          this.eventName, this.__boundHandleEvent, this.__options);\n    }\n    this.value = newListener;\n    this.__pendingValue = noChange as EventHandlerWithOptions;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this.value === 'function') {\n      this.value.call(this.eventContext || this.element, event);\n    } else {\n      (this.value as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o: AddEventListenerOptions|undefined) => o &&\n    (eventOptionsSupported ?\n         {capture: o.capture, passive: o.passive, once: o.once} :\n         o.capture as AddEventListenerOptions);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\n\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n  readonly parts: TemplatePart[] = [];\n  readonly element: HTMLTemplateElement;\n\n  constructor(result: TemplateResult, element: HTMLTemplateElement) {\n    this.element = element;\n\n    const nodesToRemove: Node[] = [];\n    const stack: Node[] = [];\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        element.content,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    // Keeps track of the last index associated with a part. We try to delete\n    // unnecessary nodes, but we never want to associate two different parts\n    // to the same index. They must have a constant node between.\n    let lastPartIndex = 0;\n    let index = -1;\n    let partIndex = 0;\n    const {strings, values: {length}} = result;\n    while (partIndex < length) {\n      const node = walker.nextNode() as Element | Comment | Text | null;\n      if (node === null) {\n        // We've exhausted the content inside a nested template element.\n        // Because we still have parts (the outer for-loop), we know:\n        // - There is a template in the stack\n        // - The walker will find a nextNode outside the template\n        walker.currentNode = stack.pop()!;\n        continue;\n      }\n      index++;\n\n      if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n        if ((node as Element).hasAttributes()) {\n          const attributes = (node as Element).attributes;\n          const {length} = attributes;\n          // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n          let count = 0;\n          for (let i = 0; i < length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            const stringForPart = strings[partIndex];\n            // Find the attribute name\n            const name = lastAttributeNameRegex.exec(stringForPart)![2];\n            // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n            const attributeLookupName =\n                name.toLowerCase() + boundAttributeSuffix;\n            const attributeValue =\n                (node as Element).getAttribute(attributeLookupName)!;\n            (node as Element).removeAttribute(attributeLookupName);\n            const statics = attributeValue.split(markerRegex);\n            this.parts.push({type: 'attribute', index, name, strings: statics});\n            partIndex += statics.length - 1;\n          }\n        }\n        if ((node as Element).tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n      } else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n        const data = (node as Text).data;\n        if (data.indexOf(marker) >= 0) {\n          const parent = node.parentNode!;\n          const strings = data.split(markerRegex);\n          const lastIndex = strings.length - 1;\n          // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n          for (let i = 0; i < lastIndex; i++) {\n            let insert: Node;\n            let s = strings[i];\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              const match = lastAttributeNameRegex.exec(s);\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] +\n                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n              insert = document.createTextNode(s);\n            }\n            parent.insertBefore(insert, node);\n            this.parts.push({type: 'node', index: ++index});\n          }\n          // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n          if (strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            (node as Text).data = strings[lastIndex];\n          }\n          // We have a part for each match found\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n        if ((node as Comment).data === marker) {\n          const parent = node.parentNode!;\n          // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n            parent.insertBefore(createMarker(), node);\n          }\n          lastPartIndex = index;\n          this.parts.push({type: 'node', index});\n          // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n          if (node.nextSibling === null) {\n            (node as Comment).data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n          partIndex++;\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({type: 'node', index: -1});\n            partIndex++;\n          }\n        }\n      }\n    }\n\n    // Remove text binding nodes after the walk to not disturb the TreeWalker\n    for (const n of nodesToRemove) {\n      n.parentNode!.removeChild(n);\n    }\n  }\n}\n\nconst endsWith = (str: string, suffix: string): boolean => {\n  const index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport type TemplatePart = {\n  readonly type: 'node'; index: number;\n}|{\n  readonly type: 'attribute';\n  index: number;\n  readonly name: string;\n  readonly strings: ReadonlyArray<string>;\n};\n\nexport const isTemplatePartActive = (part: TemplatePart) => part.index !== -1;\n\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex =\n    // eslint-disable-next-line no-control-regex\n    /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\nimport {AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\n\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor implements TemplateProcessor {\n  /**\n   * Create parts for an attribute-position binding, given the event, attribute\n   * name, and string literals.\n   *\n   * @param element The element containing the binding\n   * @param name  The attribute name\n   * @param strings The string literals. There are always at least two strings,\n   *   event for fully-controlled bindings with a single expression.\n   */\n  handleAttributeExpressions(\n      element: Element, name: string, strings: string[],\n      options: RenderOptions): ReadonlyArray<Part> {\n    const prefix = name[0];\n    if (prefix === '.') {\n      const committer = new PropertyCommitter(element, name.slice(1), strings);\n      return committer.parts;\n    }\n    if (prefix === '@') {\n      return [new EventPart(element, name.slice(1), options.eventContext)];\n    }\n    if (prefix === '?') {\n      return [new BooleanAttributePart(element, name.slice(1), strings)];\n    }\n    const committer = new AttributeCommitter(element, name, strings);\n    return committer.parts;\n  }\n  /**\n   * Create parts for a text-position binding.\n   * @param templateFactory\n   */\n  handleTextExpression(options: RenderOptions) {\n    return new NodePart(options);\n  }\n}\n\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {TemplateResult} from './template-result.js';\nimport {marker, Template} from './template.js';\n\n/**\n * A function type that creates a Template from a TemplateResult.\n *\n * This is a hook into the template-creation process for rendering that\n * requires some modification of templates before they're used, like ShadyCSS,\n * which must add classes to elements and remove styles.\n *\n * Templates should be cached as aggressively as possible, so that many\n * TemplateResults produced from the same expression only do the work of\n * creating the Template the first time.\n *\n * Templates are usually cached by TemplateResult.strings and\n * TemplateResult.type, but may be cached by other keys if this function\n * modifies the template.\n *\n * Note that currently TemplateFactories must not add, remove, or reorder\n * expressions, because there is no way to describe such a modification\n * to render() so that values are interpolated to the correct place in the\n * template instances.\n */\nexport type TemplateFactory = (result: TemplateResult) => Template;\n\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result: TemplateResult) {\n  let templateCache = templateCaches.get(result.type);\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap<TemplateStringsArray, Template>(),\n      keyString: new Map<string, Template>()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  let template = templateCache.stringsArray.get(result.strings);\n  if (template !== undefined) {\n    return template;\n  }\n\n  // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n  const key = result.strings.join(marker);\n\n  // Check if we already have a Template for this key\n  template = templateCache.keyString.get(key);\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement());\n    // Cache the Template for this key\n    templateCache.keyString.set(key, template);\n  }\n\n  // Cache all future queries for this TemplateStringsArray\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\n\n/**\n * The first argument to JS template tags retain identity across multiple\n * calls to a tag for the same literal, so we can cache work done per literal\n * in a Map.\n *\n * Safari currently has a bug which occasionally breaks this behavior, so we\n * need to cache the Template at two levels. We first cache the\n * TemplateStringsArray, and if that fails, we cache a key constructed by\n * joining the strings array.\n */\nexport interface TemplateCache {\n  readonly stringsArray: WeakMap<TemplateStringsArray, Template>;\n  readonly keyString: Map<string, Template>;\n}\n\nexport const templateCaches = new Map<string, TemplateCache>();\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {removeNodes} from './dom.js';\nimport {NodePart} from './parts.js';\nimport {RenderOptions} from './render-options.js';\nimport {templateFactory} from './template-factory.js';\n\nexport const parts = new WeakMap<Node, NodePart>();\n\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render =\n    (result: unknown,\n     container: Element|DocumentFragment,\n     options?: Partial<RenderOptions>) => {\n      let part = parts.get(container);\n      if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart({\n                               templateFactory,\n                               ...options,\n                             }));\n        part.appendInto(container);\n      }\n      part.setValue(result);\n      part.commit();\n    };\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @packageDocumentation\n */\n\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport {defaultTemplateProcessor} from './lib/default-template-processor.js';\nimport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\n\nexport {DefaultTemplateProcessor, defaultTemplateProcessor} from './lib/default-template-processor.js';\nexport {directive, DirectiveFn, isDirective} from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport {removeNodes, reparentNodes} from './lib/dom.js';\nexport {noChange, nothing, Part} from './lib/part.js';\nexport {AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart} from './lib/parts.js';\nexport {RenderOptions} from './lib/render-options.js';\nexport {parts, render} from './lib/render.js';\nexport {templateCaches, templateFactory} from './lib/template-factory.js';\nexport {TemplateInstance} from './lib/template-instance.js';\nexport {TemplateProcessor} from './lib/template-processor.js';\nexport {SVGTemplateResult, TemplateResult} from './lib/template-result.js';\nexport {createMarker, isTemplatePartActive, Template} from './lib/template.js';\n\ndeclare global {\n  interface Window {\n    litHtmlVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n  (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.3.0');\n}\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings: TemplateStringsArray, ...values: unknown[]) =>\n    new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {reparentNodes} from './dom.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker} from './template.js';\n\ndeclare const trustedTypes: typeof window.trustedTypes;\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = window.trustedTypes &&\n    trustedTypes!.createPolicy('lit-html', {createHTML: (s) => s});\n\nconst commentMarker = ` ${marker} `;\n\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n  readonly strings: TemplateStringsArray;\n  readonly values: readonly unknown[];\n  readonly type: string;\n  readonly processor: TemplateProcessor;\n\n  constructor(\n      strings: TemplateStringsArray, values: readonly unknown[], type: string,\n      processor: TemplateProcessor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n\n  /**\n   * Returns a string of HTML used to create a `<template>` element.\n   */\n  getHTML(): string {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      // For each binding we want to determine the kind of marker to insert\n      // into the template source before it's parsed by the browser's HTML\n      // parser. The marker type is based on whether the expression is in an\n      // attribute, text, or comment position.\n      //   * For node-position bindings we insert a comment with the marker\n      //     sentinel as its text content, like <!--{{lit-guid}}-->.\n      //   * For attribute bindings we insert just the marker sentinel for the\n      //     first binding, so that we support unquoted attribute bindings.\n      //     Subsequent bindings can use a comment marker because multi-binding\n      //     attributes must be quoted.\n      //   * For comment bindings we insert just the marker sentinel so we don't\n      //     close the comment.\n      //\n      // The following code scans the template source, but is *not* an HTML\n      // parser. We don't need to track the tree structure of the HTML, only\n      // whether a binding is inside a comment, and if not, if it appears to be\n      // the first binding in an attribute.\n      const commentOpen = s.lastIndexOf('<!--');\n      // We're in comment position if we have a comment open with no following\n      // comment close. Because <-- can appear in an attribute value there can\n      // be false positives.\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n          s.indexOf('-->', commentOpen + 1) === -1;\n      // Check to see if we have an attribute-like sequence preceding the\n      // expression. This can match \"name=value\" like structures in text,\n      // comments, and attribute values, so there can be false-positives.\n      const attributeMatch = lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        // We're only in this branch if we don't have a attribute-like\n        // preceding sequence. For comments, this guards against unusual\n        // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n        // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n        // below.\n        html += s + (isCommentBinding ? commentMarker : nodeMarker);\n      } else {\n        // For attributes we use just a marker sentinel, and also append a\n        // $lit$ suffix to the name to opt-out of attribute-specific parsing\n        // that IE and Edge do for style and certain SVG attributes.\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n            attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n            marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = document.createElement('template');\n    let value = this.getHTML();\n    if (policy !== undefined) {\n      // this is secure because `this.strings` is a TemplateStringsArray.\n      // TODO: validate this when\n      // https://github.com/tc39/proposal-array-is-template-object is\n      // implemented.\n      value = policy.createHTML(value) as unknown as string;\n    }\n    template.innerHTML = value;\n    return template;\n  }\n}\n\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n  getHTML(): string {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n\n  getTemplateElement(): HTMLTemplateElement {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild!;\n    content.removeChild(svgElement);\n    reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Part} from './part.js';\n\nconst directives = new WeakMap<object, true>();\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type DirectiveFactory = (...args: any[]) => object;\n\nexport type DirectiveFn = (part: Part) => void;\n\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = <F extends DirectiveFactory>(f: F): F =>\n    ((...args: unknown[]) => {\n      const d = f(...args);\n      directives.set(d, true);\n      return d;\n    }) as F;\n\nexport const isDirective = (o: unknown): o is DirectiveFn => {\n  return typeof o === 'function' && directives.has(o);\n};\n","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * The Part interface represents a dynamic part of a template instance rendered\n * by lit-html.\n */\nexport interface Part {\n  readonly value: unknown;\n\n  /**\n   * Sets the current part value, but does not write it to the DOM.\n   * @param value The value that will be committed.\n   */\n  setValue(value: unknown): void;\n\n  /**\n   * Commits the current part value, causing it to actually be written to the\n   * DOM.\n   *\n   * Directives are run at the start of `commit`, so that if they call\n   * `part.setValue(...)` synchronously that value will be used in the current\n   * commit, and there's no need to call `part.commit()` within the directive.\n   * If directives set a part value asynchronously, then they must call\n   * `part.commit()` manually.\n   */\n  commit(): void;\n}\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: readonly unknown[]) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari does not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n"],"sourceRoot":""}