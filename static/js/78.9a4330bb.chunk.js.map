{"version":3,"sources":["../node_modules/@ui5/webcomponents/dist/generated/templates/SliderTemplate.lit.js","../node_modules/@ui5/webcomponents/dist/Slider.js"],"names":["block1","context","html","showTickmarks","block2","undefined","styleMap","styles","tickmarks","labelInterval","block3","classMap","classes","labelContainer","repeat","_labels","item","index","_id","block4","label","ifDefined","block5","tooltip","tooltipValue","main","tags","suffix","setTags","setSuffix","_onmousedown","_ontouchstart","_onmouseover","_onmouseout","effectiveDir","step","progress","handle","showTooltip","block0","metadata","tag","languageAware","managedSlots","properties","value","type","Float","defaultValue","Slider","_stateStorage","i18nBundle","getI18nBundle","SliderTemplate","this","isCurrentStateOutdated","notResized","syncUIAndState","_updateHandleAndProgress","event","disabled","newValue","handleDownBase","_valueOnInteractionStart","_isHandlePressed","constructor","getPageXValueFromEvent","updateValue","preventDefault","_effectiveStep","getValueFromInteraction","_effectiveMin","_effectiveMax","getBoundingClientRect","directionStart","fireEvent","handleUpBase","clientX","sliderHandleDomRect","shadowRoot","querySelector","left","right","max","min","_progressPercentage","_handlePositionFromStart","_tickmarks","_labelWidth","_tooltipVisibility","_labelItems","stepPrecision","_getDecimalPrecisionOfNumber","toFixed","fetchI18nBundle","SliderBase","define"],"mappings":"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","file":"static/js/78.9a4330bb.chunk.js","sourcesContent":["\n/* eslint no-unused-vars: 0 */\nimport ifDefined from '@ui5/webcomponents-base/dist/renderer/ifDefined.js';\nimport { html, svg, repeat, classMap, styleMap, unsafeHTML, setTags, setSuffix } from '@ui5/webcomponents-base/dist/renderer/LitRenderer.js';\nconst block0 = (context) => { return html`<div class=\"ui5-slider-root\" @mousedown=\"${context._onmousedown}\" @touchstart=\"${context._ontouchstart}\" @mouseover=\"${context._onmouseover}\" @mouseout=\"${context._onmouseout}\" dir=\"${ifDefined(context.effectiveDir)}\"><div class=\"ui5-slider-inner\">${ context.step ? block1(context) : undefined }<div class=\"ui5-slider-progress-container\"><div class=\"ui5-slider-progress\" style=\"${styleMap(context.styles.progress)}\"></div></div><div class=\"ui5-slider-handle\" style=\"${styleMap(context.styles.handle)}\">${ context.showTooltip ? block5(context) : undefined }</div></div></div>`; };\nconst block1 = (context) => { return html`${ context.showTickmarks ? block2(context) : undefined }`; };\nconst block2 = (context) => { return html`<div class=\"ui5-slider-tickmarks\" style=\"${styleMap(context.styles.tickmarks)}\"></div>${ context.labelInterval ? block3(context) : undefined }`; };\nconst block3 = (context) => { return html`<ul class=\"ui5-slider-labels ${classMap(context.classes.labelContainer)}\" style=\"${styleMap(context.styles.labelContainer)}\">${ repeat(context._labels, (item, index) => item._id || index, (item, index) => block4(item, index, context)) }</ul>`; };\nconst block4 = (item, index, context) => { return html`<li style=\"${styleMap(context.styles.label)}\">${ifDefined(item)}</li>`; };\nconst block5 = (context) => { return html`<div class=\"ui5-slider-tooltip\" style=\"${styleMap(context.styles.tooltip)}\"><span class=\"ui5-slider-tooltip-value\">${ifDefined(context.tooltipValue)}</span></div>`; };\n\n\nconst main = (context, tags, suffix) => {\n\tsetTags(tags);\n\tsetSuffix(suffix);\n\treturn block0(context);\n};\n \nexport default main;","import Float from \"@ui5/webcomponents-base/dist/types/Float.js\";\nimport { fetchI18nBundle, getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport SliderBase from \"./SliderBase.js\";\n\n// Template\nimport SliderTemplate from \"./generated/templates/SliderTemplate.lit.js\";\n\n/**\n * @public\n */\nconst metadata = {\n\ttag: \"ui5-slider\",\n\tlanguageAware: true,\n\tmanagedSlots: true,\n\tproperties: /** @lends sap.ui.webcomponents.main.Slider.prototype */  {\n\t\t/**\n\t\t * Current value of the slider\n\t\t *\n\t\t * @type {Float}\n\t\t * @defaultvalue 0\n\t\t * @public\n\t\t */\n\t\tvalue: {\n\t\t\ttype: Float,\n\t\t\tdefaultValue: 0,\n\t\t},\n\t},\n};\n\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The Slider component represents a numerical range and a handle (grip).\n * The purpose of the component is to enable visual selection of a value in\n * a continuous numerical range by moving an adjustable handle.\n *\n * <h3>Structure</h3>\n * The most important properties of the Slider are:\n * <ul>\n * <li>min - The minimum value of the slider range</li>\n * <li>max - The maximum value of the slider range</li>\n * <li>value - The current value of the slider</li>\n * <li>step - Determines the increments in which the slider will move</li>\n * <li>showTooltip - Determines if a tooltip should be displayed above the handle</li>\n * <li>showTickmarks - Displays a visual divider between the step values</li>\n * <li>labelInterval - Labels some or all of the tickmarks with their values.</li>\n * </ul>\n *\n * <h3>Usage</h3>\n * The most common usecase is to select values on a continuous numerical scale (e.g. temperature, volume, etc. ).\n *\n * <h3>Responsive Behavior</h3>\n * The <code>ui5-slider</code> component adjusts to the size of its parent container by recalculating and\n * resizing the width of the control. You can move the slider handle in several different ways:\n * <ul>\n * <li>Drag and drop to the desired value</li>\n * <li>Click/tap on the range bar to move the handle to that location</li>\n * </ul>\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/Slider\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.Slider\n * @extends SliderBase\n * @tagname ui5-slider\n * @since 1.0.0-rc.11\n * @public\n */\nclass Slider extends SliderBase {\n\tstatic get metadata() {\n\t\treturn metadata;\n\t}\n\n\tstatic get template() {\n\t\treturn SliderTemplate;\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._stateStorage.value = null;\n\t\tthis.i18nBundle = getI18nBundle(\"@ui5/webcomponents\");\n\t}\n\n\t/**\n\t *\n\t * Check if the previously saved state is outdated. That would mean\n\t * either it is the initial rendering or that a property has been changed\n\t * programatically - because the previous state is always updated in\n\t * the interaction handlers.\n\t *\n\t * Normalize current properties, update the previously stored state.\n\t * Update the visual UI representation of the Slider\n\t *\n\t */\n\tonBeforeRendering() {\n\t\tif (!this.isCurrentStateOutdated()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.notResized = true;\n\t\tthis.syncUIAndState(\"value\");\n\t\tthis._updateHandleAndProgress(this.value);\n\t}\n\n\t/**\n\t * Called when the user starts interacting with the slider\n\t *\n\t * @private\n\t */\n\t_onmousedown(event) {\n\t\t// If step is 0 no interaction is available because there is no constant\n\t\t// (equal for all user environments) quantitative representation of the value\n\t\tif (this.disabled || this.step === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newValue = this.handleDownBase(event);\n\t\tthis._valueOnInteractionStart = this.value;\n\n\t\t// Do not yet update the Slider if press is over a handle. It will be updated if the user drags the mouse.\n\t\tif (!this._isHandlePressed(this.constructor.getPageXValueFromEvent(event))) {\n\t\t\tthis._updateHandleAndProgress(newValue);\n\t\t\tthis.updateValue(\"value\", newValue);\n\t\t}\n\t}\n\n\t/**\n\t * Called when the user moves the slider\n\t *\n\t * @private\n\t */\n\t_handleMove(event) {\n\t\tevent.preventDefault();\n\n\t\t// If step is 0 no interaction is available because there is no constant\n\t\t// (equal for all user environments) quantitative representation of the value\n\t\tif (this.disabled || this._effectiveStep === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newValue = this.constructor.getValueFromInteraction(event, this._effectiveStep, this._effectiveMin, this._effectiveMax, this.getBoundingClientRect(), this.directionStart);\n\n\t\tthis._updateHandleAndProgress(newValue);\n\t\tthis.updateValue(\"value\", newValue);\n\t}\n\n\t/** Called when the user finish interacting with the slider\n\t *\n\t * @private\n\t */\n\t_handleUp(event) {\n\t\tif (this._valueOnInteractionStart !== this.value) {\n\t\t\tthis.fireEvent(\"change\");\n\t\t}\n\n\t\tthis.handleUpBase();\n\t\tthis._valueOnInteractionStart = null;\n\t}\n\n\t/** Determines if the press is over the handle\n\t *\n\t * @private\n\t */\n\t_isHandlePressed(clientX) {\n\t\tconst sliderHandle = this.shadowRoot.querySelector(\".ui5-slider-handle\");\n\t\tconst sliderHandleDomRect = sliderHandle.getBoundingClientRect();\n\n\t\treturn clientX >= sliderHandleDomRect.left && clientX <= sliderHandleDomRect.right;\n\t}\n\n\n\t/** Updates the UI representation of the progress bar and handle position\n\t *\n\t * @private\n\t */\n\t_updateHandleAndProgress(newValue) {\n\t\tconst max = this._effectiveMax;\n\t\tconst min = this._effectiveMin;\n\n\t\t// The progress (completed) percentage of the slider.\n\t\tthis._progressPercentage = (newValue - min) / (max - min);\n\t\t// How many pixels from the left end of the slider will be the placed the affected  by the user action handle\n\t\tthis._handlePositionFromStart = this._progressPercentage * 100;\n\t}\n\n\tget styles() {\n\t\treturn {\n\t\t\tprogress: {\n\t\t\t\t\"transform\": `scaleX(${this._progressPercentage})`,\n\t\t\t\t\"transform-origin\": `${this.directionStart} top`,\n\t\t\t},\n\t\t\thandle: {\n\t\t\t\t[this.directionStart]: `${this._handlePositionFromStart}%`,\n\t\t\t},\n\t\t\ttickmarks: {\n\t\t\t\t\"background\": `${this._tickmarks}`,\n\t\t\t},\n\t\t\tlabel: {\n\t\t\t\t\"width\": `${this._labelWidth}%`,\n\t\t\t},\n\t\t\tlabelContainer: {\n\t\t\t\t\"width\": `100%`,\n\t\t\t\t[this.directionStart]: `-${this._labelWidth / 2}%`,\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\t\"visibility\": `${this._tooltipVisibility}`,\n\t\t\t},\n\t\t};\n\t}\n\n\tget labelItems() {\n\t\treturn this._labelItems;\n\t}\n\n\tget tooltipValue() {\n\t\tconst stepPrecision = this.constructor._getDecimalPrecisionOfNumber(this._effectiveStep);\n\t\treturn this.value.toFixed(stepPrecision);\n\t}\n\n\tstatic async onDefine() {\n\t\tawait fetchI18nBundle(\"@ui5/webcomponents\");\n\t}\n}\n\nSlider.define();\n\nexport default Slider;\n"],"sourceRoot":""}